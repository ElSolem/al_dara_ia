package zeroth

import "core:fmt"

Vector2 :: struct {
	x: f32,
	y: f32,
}

Vector3 :: struct {
    x: f32,
    y: f32,
    z: f32,
}

BiomemeType :: enum { 
    Weak, // (-) Weak Negative
    Strong, // (+) Strong Positive
    Surprise, // (!) Surprise
    Unknown // (?) Unknown
}

Polarity :: enum {
    Negative,
    Positive
}

Biomeme :: struct { // A digital token that represents virtual/mental particles
    type: BiomemeType,
    polarity: Polarity,
    vec2d: Vector2,
    vec3d: Vector3
}



process_biomeme :: proc(biomeme: ^Biomeme) {
    switch biomeme.type {
        case BiomemeType.Weak:
            fmt.println("Weak Biomeme")
            fmt.println("Minus token polarity is ", biomeme.polarity)
        case BiomemeType.Strong:
            fmt.println("Strong Biomeme")
            fmt.println("Plus token polarity is ", biomeme.polarity)
        case BiomemeType.Surprise:
            fmt.println("Surprise Biomeme")
            fmt.println("Surprise token polarity is ", biomeme.polarity)
        case BiomemeType.Unknown:
            fmt.println("Unknown Biomeme")
            fmt.println("Unknown token polarity is ", biomeme.polarity)
    }
}

main :: proc() {
    token1 := create_biomeme(BiomemeType.Weak, Polarity.Negative, Vector2{1.0, 2.0}, Vector3{1.0, 2.0, 3.0})
    token2 := create_biomeme(BiomemeType.Strong, Polarity.Positive, Vector2{1.0, 2.0}, Vector3{1.0, 2.0, 3.0})
    token3 := create_biomeme(BiomemeType.Surprise, Polarity.Positive, Vector2{1.0, 2.0}, Vector3{1.0, 2.0, 3.0})
    token4 := create_biomeme(BiomemeType.Unknown, Polarity.Negative, Vector2{1.0, 2.0}, Vector3{1.0, 2.0, 3.0})
    process_biomeme(&token1)
    process_biomeme(&token2)
    process_biomeme(&token3)
    process_biomeme(&token4)
}