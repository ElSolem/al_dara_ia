package zeroth

import "core:fmt"
import "base:builtin"
import "core:time"

HEAD_SEAT_COUNT :: 2
TAIL_SEAT_COUNT :: 2
SEAT_COUNT_PER_SIDE :: 9
SEAT_COUNT_PER_TABLE :: SEAT_COUNT_PER_SIDE * 2
TABLE_COUNT :: 2
TOTAL_SEAT_COUNT :: SEAT_COUNT_PER_TABLE * TABLE_COUNT

Token :: struct {
    type: TokenType,
    polarity: Polarity,
    state: State,
    position: Position,
    lifecycle: int // 1(birth)-20(death) tracked as it is processed by each seat: pos turns to surprise at death and neg turns to unknown at death
}

TokenType :: enum { 
    Weak, // (-) Weak Negative
    Strong, // (+) Strong Positive
    Surprise, // (!) Surprise // Double Positive
    Unknown // (?) Unknown // Double Negative
}

Polarity :: enum {Negative, Positive}

State :: enum { // State of the token
    Active,
    Inactive
}

Position :: struct {
    table: Polarity, // Table position
    seat: SeatPosition // Seat position
}

SeatPosition :: enum { // 20 seats on a table
    Head,
    Tail,
    L1,
    L2,
    L3,
    L4,
    L5,
    L6,
    L7,
    L8,
    L9,
    R1,
    R2,
    R3,
    R4,
    R5,
    R6,
    R7,
    R8,
    R9
}

Seat :: struct {
    pos: SeatPosition,
    next_seat: ^Seat
}

Head :: struct {
    seat: Seat,
}

Tail :: struct {
    seat: Seat,
}

Table :: struct {
    leftSide: [SEAT_COUNT_PER_SIDE]Seat,
    rightSide: [SEAT_COUNT_PER_SIDE]Seat,
    head: Head,
    tail: Tail,
}

head_generator :: proc() -> [2]Token {
    weak_token := Token{
        type = TokenType.Weak,
        polarity = Polarity.Negative,
        state = State.Active,
        position = Position{table = Polarity.Negative, seat = SeatPosition.Head},
        lifecycle = 1
    }

    strong_token := Token{
        type = TokenType.Strong,
        polarity = Polarity.Positive,
        state = State.Active,
        position = Position{table = Polarity.Negative, seat = SeatPosition.Head},
        lifecycle = 1
    }

    return [2]Token{weak_token, strong_token}
}

weak_token_positive :: proc(token: ^Token) -> ^Token {
    fmt.printfln("Processing Weak Positive Token at seat %s", token.position.seat)
    return token
}

weak_token_negative :: proc(token: ^Token) -> ^Token {
    fmt.printfln("Processing Weak Negative Token at seat %s", token.position.seat)
    return token
}

strong_token_positive :: proc(token: ^Token) -> ^Token {
    fmt.printfln("Processing Strong Positive Token at seat %s", token.position.seat)
    return token
}

strong_token_negative :: proc(token: ^Token) -> ^Token {
    fmt.printfln("Processing Strong Negative Token at seat %s", token.position.seat)
    return token
}

surprise_token_positive :: proc(token: ^Token) -> ^Token {
    fmt.printfln("Processing Surprise Positive Token at seat %s", token.position.seat)
    return token
}

surprise_token_negative :: proc(token: ^Token) -> ^Token {
    fmt.printfln("Processing Surprise Negative Token at seat %s", token.position.seat)
    return token
}

unknown_token :: proc(token: ^Token) -> ^Token {
    fmt.printfln("Processing Unknown Token at seat %s", token.position.seat)
    return token
}

// Directly call the correct procedure based on token type
process_token :: proc(token: ^Token) -> ^Token {
    switch token.type {
        case TokenType.Weak: 
            if token.polarity == Polarity.Positive {
                return weak_token_positive(token)
            } else {
                return weak_token_negative(token)
            }
        case TokenType.Strong:
            if token.polarity == Polarity.Positive {
                return strong_token_positive(token)
            } else {
                return strong_token_negative(token)
            }
        case TokenType.Surprise:
            if token.polarity == Polarity.Positive {
                return surprise_token_positive(token)
            } else {
                return surprise_token_negative(token)
            }
        case TokenType.Unknown:
            return unknown_token(token)
    }
    return token
}

main :: proc() {
    fmt.printfln("Hello, World!")
    head_tokens := head_generator()
    for &token in head_tokens {
        process_token(&token)
    }
}
